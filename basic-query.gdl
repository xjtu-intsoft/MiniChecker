// script
use coref::javascript::*
use coref::xml::*

fn load_js_db() -> JavascriptDB {
    return JavascriptDB::load("coref_javascript_src.db")
}

fn load_xml_db() -> XmlDB {
    return XmlDB::load("coref_xml_src.db")
}
// ——————————————————————————————————————————————————————
// 通用函数
// ——————————————————————————————————————————————————————

// 获取一个CallExpression的全名
fn getCallName(ce : CallExpression) -> string {
    // let(jsDB = load_js_db()){
    //     for(idt in Identifier::__all__(jsDB)){
    //         if(ce = idt.getParent()){
    //             return idt.getText()
    //         }
    //     }
    // }
    // let(jsDB = load_js_db()){
    //     for(pae in PropertyAccessExpression::__all__(jsDB)){
    //         if(ce = pae.getParent()){
    //             return pae.getText()
    //         }
    //     }
    // }
    let(jsDB = load_js_db()){
        for(e in LeftHandSideExpression::__all__(jsDB)){
            if(e = ce.getExpression()){
                return e.getText()
            }
        }
    }
    return ce.getExpression().getText()
} 

// 获取一个函数名
fn getFunctionName(fld: FunctionLikeDeclaration) -> string {
    return fld.getText()
}

// 获取一个方法的Page页面中的属性名 
fn getPageMethodName(ce: CallExpression) -> string {
    let(jsDB = load_js_db()) {
        for(pa in PropertyAssignment::__all__(jsDB)){
            for(cal in CallExpression::__all__(jsDB)){
                for(objl in ObjectLiteralExpression::__all__(jsDB)){
                    if((cal.getExpression().getText() = "App" || cal.getExpression().getText() = "Page") && 
                        pa.id = cal.getADescendant().id && ce.id = pa.getADescendant().id &&
                        objl.getParent().id = cal.id && pa.getParent().id = objl.id){
                            return pa.getName()
                    }
                }
            }
        }
    }
    let(jsDB = load_js_db()) {
        for(md in MethodDeclaration::__all__(jsDB)){
            for(cal in CallExpression::__all__(jsDB)){
                for(objl in ObjectLiteralExpression::__all__(jsDB)) {
                    if((cal.getExpression().getText() = "App" || cal.getExpression().getText() = "Page") && 
                        md.id = cal.getADescendant().id && ce.id = md.getADescendant().id &&
                        objl.getParent().id = cal.id && md.getParent().id = objl.id){
                            return md.getName()
                    }
                }
               
            }
        }
    }
}

// 获取一个方法的上层方法名
fn getParentMethodName(ce: CallExpression, methodName: string, methodLoc:int, methodId: int) -> bool {
    let(jsDB = load_js_db()) {
        for(pa in PropertyAssignment::__all__(jsDB)){
                if(ce.id = pa.getADescendant().id && methodName = pa.getName() && methodLoc = pa.getLocation().getStartLineNumber() && methodId = pa.id){
                    return 1 = 1
                }
        }
    }
    let(jsDB = load_js_db()) {
        for(md in MethodDeclaration::__all__(jsDB)){
                if(ce.id = md.getADescendant().id && methodName = md.getName() && methodLoc = md.getLocation().getStartLineNumber() && methodId = md.id){
                    return 1 = 1
                }
        }
    }
}


// 获取一个页面的方法名
// onLaunch: function() {...}
fn getPagePropertyMethodDeclarationName(ce:CallExpression) -> string {
    let(jsDB = load_js_db()) {
        for(md in MethodDeclaration::__all__(jsDB)){
            for(cal in CallExpression::__all__(jsDB)){
                if((cal.getExpression().getText() = "App" || cal.getExpression().getText() = "Page") && 
                md.id = cal.getADescendant().id && ce.id = md.getADescendant().id){
                    return md.getName()
                }
            }
        }
    }
}

// 获取一个导出文件的方法名
// function authUser(){...}
fn getExportFileFunctionDeclarationName(ce:CallExpression) -> string {
    let(jsDB = load_js_db()) {
        for(fd in FunctionDeclaration::__all__(jsDB)){
            if(ce.id = fd.getADescendant().id){
                return fd.getName()
            }  
        }
    }
}

// 获取一个调用返回值传递的变量名
fn getCalleeValue(ce: CallExpression) -> string {
    let (jsDB = load_js_db()) {
        for(pae in PropertyAccessExpression::__all__(jsDB)) {
            let(callee = pae.getExpression().getText()) {
                for(vd in VariableDeclaration::__all__(jsDB)) {
                    for(vd_left in Identifier::__all__(jsDB)) {
                        if(ce.id = pae.getParent() .id
                        && vd.id = vd_left.getParent().id
                        && callee = vd_left.getText() 
                        && vd.getAnAncestorEnclosingFunction() = ce.getAnAncestorEnclosingFunction()){
                                return vd.getText()
                        }   
                    }                
                }
            }
        }
    }
    return ""
}

// 判断一个PropertyAccessExpression是否为module.exports
fn isModuleExports(pae: PropertyAccessExpression) -> bool {
    let (jsDB = load_js_db()) {
        for(idt in Identifier::__all__(jsDB)) {
            if(pae.id = idt.getParent().id && (idt.getName() = "exports" || idt.getName() = "module")) {
                return 1 = 1
            }
        }
    }
}

// 判断一个Call的主对象是指定字符
fn isSpecificCall(ce: CallExpression, caller: string) -> bool {
    let(jsDB = load_js_db()) {
       for(pae in PropertyAccessExpression::__all__(jsDB)){
            if(ce.id = pae.getParent().id && pae.getExpression().getText() = caller) {
                return 1 = 1
            }
       } 
    }
}

// 判断this是否在页面函数内
fn isInPageMethod(tk: ThisKeyword) -> bool {
    let(jsDB = load_js_db()) {
        for(fe in FunctionLikeDeclaration::__all__(jsDB)) {
            for(pa in PropertyAssignment::__all__(jsDB)) {
                for(ole in ObjectLiteralExpression::__all__(jsDB)) {
                    for(ce in CallExpression::__all__(jsDB)) {
                        if(fe = tk.getEnclosingFunction() &&
                        pa.id = fe.getParent().id &&
                        ole.id = pa.getParent().id &&
                        ce.id = ole.getParent().id &&
                        getCallName(ce) = "Page"
                        ){
                            return 1 = 1
                        }
                    }    
                }           
            }                     
        }               
        
    }
}

// 获取一个IfStmt中的条件变量
fn getBranchConditionVariable(ifstmt: IfStatement) -> string {
    // if(a){...}
    let(jsDB = load_js_db()){
        for(idf in Identifier::__all__(jsDB)){
            if(idf.id = ifstmt.getAChild().id){
                return idf.getText()
            }
        }
    }
    // if(!a){...}
    let(jsDB = load_js_db()){
        for(pue in PrefixUnaryExpression::__all__(jsDB)){
            for(idf in Identifier::__all__(jsDB)){
                if(pue.id = ifstmt.getAChild().id && idf.id = pue.getAChild().id){
                    return idf.getText()
                }
            }
        }
    }
    // if(a<b){...}
    let(jsDB = load_js_db()){
        for(be in BinaryExpression::__all__(jsDB)){
            for(idf in Identifier::__all__(jsDB)){
                if(be.id = ifstmt.getAChild().id && idf.id = be.getAChild().id){
                    return idf.getText()
                }
            }
        }
    }
    // if(a.b == 403)
    let(jsDB = load_js_db()){
        for(be in BinaryExpression::__all__(jsDB)){
            for(pae in PropertyAccessExpression::__all__(jsDB)){
                if(be.id = ifstmt.getAChild().id && pae.id = be.getAChild().id){
                    return pae.getText()
                }
            }
        }
    }
    // if(a.b){...}
    let(jsDB = load_js_db()){
        for(pae in PropertyAccessExpression::__all__(jsDB)) {
            if(pae.id = ifstmt.getAChild().id){
                return pae.getText()
            }
        }
    }
    // if(!a||(b > c)){...}
    let(jsDB = load_js_db()){
        for(be in BinaryExpression::__all__(jsDB)){
            for(innerbe in BinaryExpression::__all__(jsDB)){
                for(idf in Identifier::__all__(jsDB)){
                    if(be.id = ifstmt.getAChild().id && innerbe.id = be.getADescendant().id && idf.id = innerbe.getAChild().id){
                        return idf.getText()
                    }
                }
            }
        }
    }
    // if(!a||(b > c)){...}
    let(jsDB = load_js_db()){
        for(be in BinaryExpression::__all__(jsDB)){
            for(innerbe in PrefixUnaryExpression::__all__(jsDB)){
                for(idf in Identifier::__all__(jsDB)){
                    if(be.id = ifstmt.getAChild().id && innerbe.id = be.getADescendant().id && idf.id = innerbe.getAChild().id){
                        return idf.getText()
                    }
                }
            }
        }
    }
}

fn getSuccessCallback(ce:CallExpression) -> string {
    // my.getAuthCode({fail:(res)=>{res=...}})
    let(jsDB = load_js_db()){
        for(ole in ObjectLiteralExpression::__all__(jsDB)){
            for(pa in PropertyAssignment::__all__(jsDB)){
                for(fld in FunctionLikeDeclaration::__all__(jsDB)){
                    if(ole.id = ce.getAChild().id
                    && pa.id = ole.getAChild().id
                    && pa.getName() = "success"
                    && fld.id = pa.getAChild().id){
                        return fld.getText()
                    }                     
                }
            }
        }
    }
    // my.getLocation({success(res){...}})
    let(jsDB = load_js_db()){
        for(ole in ObjectLiteralExpression::__all__(jsDB)){
            for(md in MethodDeclaration::__all__(jsDB)){
                for(idt in Identifier::__all__(jsDB)){
                    if(ole.id = ce.getAChild().id
                    && md.id = ole.getAChild().id
                    && idt.getName() = "success"
                    && idt.id = md.getAChild().id){
                        return md.getText()
                    }                     
                }
            }
        }
    }
    return "NO_SUCCESS_CALLBACK"
}


fn getSuccessCallId(ce:CallExpression) -> *int {
    // my.getAuthCode({fail:(res)=>{res=...}})
    let(jsDB = load_js_db()){
        for(ole in ObjectLiteralExpression::__all__(jsDB)){
            for(pa in PropertyAssignment::__all__(jsDB)){
                for(fld in FunctionLikeDeclaration::__all__(jsDB)){
                    for(cex in CallExpression::__all__(jsDB)){
                        if(ole.id = ce.getAChild().id
                        && pa.id = ole.getAChild().id
                        && pa.getName() = "success"
                        && fld.id = pa.getAChild().id
                        && cex.id = fld.getADescendant().id){
                            yield cex.id        
                        }
                    }                     
                }
            }
        }
    }
}

fn getFailCallback(ce:CallExpression) -> string {
    // my.getAuthCode({fail:(res)=>{res=...}})
    let(jsDB = load_js_db()){
        for(ole in ObjectLiteralExpression::__all__(jsDB)){
            for(pa in PropertyAssignment::__all__(jsDB)){
                for(fld in FunctionLikeDeclaration::__all__(jsDB)){
                    if(ole.id = ce.getAChild().id
                    && pa.id = ole.getAChild().id
                    && pa.getName() = "fail"
                    && fld.id = pa.getAChild().id){
                        return fld.getText()
                    }                     
                }
            }
        }
    }
    return "NO_FAIL_CALLBACK"
}

fn getAuthScope(ce:CallExpression) -> string {
    // scopes: 'auth_base',
    let(jsDB = load_js_db()){
        for(ole in ObjectLiteralExpression::__all__(jsDB)){
            for(pa in PropertyAssignment::__all__(jsDB)){
                for(sl in StringLiteral::__all__(jsDB)){
                    if(ole.id = ce.getAChild().id
                    && pa.id = ole.getAChild().id
                    && pa.getName() = "scopes"
                    && sl.id = pa.getAChild().id){
                        return sl.getText()
                    }                     
                }
            }
        }
    }
    // scopes: ['auth_base']
    let(jsDB = load_js_db()){
        for(ole in ObjectLiteralExpression::__all__(jsDB)){
            for(pa in PropertyAssignment::__all__(jsDB)){
                for(ale in ArrayLiteralExpression::__all__(jsDB)){
                    if(ole.id = ce.getAChild().id
                    && pa.id = ole.getAChild().id
                    && pa.getName() = "scope"
                    && ale.id = pa.getAChild().id){
                        return ale.getText()
                    }                     
                }
            }
        }
    }
    return "NO_SCOPE"
}

fn getPropertyAssignValueByName(ole: ObjectLiteralExpression, name: string) -> string {
    // my.request({url: ...})
    let(jsDB = load_js_db()){
        for(pa in PropertyAssignment::__all__(jsDB)){
            for(idf in Identifier::__all__(jsDB)){
                if(pa.getParent() = ole
                && idf.getParent().id = pa.id
                && name = idf.getName()){
                    return pa.getText()
                }
            }
        }
    }
}

fn isAuthorizeAPI(cn: string) -> bool {
    if (cn = "my.openLocation" 
    || cn = "my.openCarService"
    || cn = "my.getLocation"
    || cn = "my.ap.__openLifePayment"
    || cn = "my.startContinuousLocation"
    || cn = "my.ap.getMainSelectedCity"
    || cn = "my.scan"
    || cn = "cameraContext.takePhoto"
    || cn = "cameraFrameListener.start"
    || cn = "my.chooseImage"
    || cn = "my.chooseVideo"
    || cn = "my.saveImage"
    || cn = "my.saveVideoToPhotosAlbum"
    || cn = "RecorderManager.start"
    || cn = "my.startRecord"
    || cn = "my.stopRecord"
    || cn = "RecorderManager.stop"
    || cn = "my.cancelRecord"
    || cn = "my.connectBLEDevice"
    || cn = "my.openBluetoothAdapter"
    || cn = "my.getBeacons"
    || cn = "my.choosePhoneContact"
    || cn = "my.chooseAlipayContact"
    || cn = "my.chooseContact"
    || cn = "my.getClipboard"
    || cn = "my.getCarrierName"
    || cn = "my.getAuthCode"
    || cn = "my.ap.getAuthCode"
    || cn = "my.getOpenUserInfo"
    || cn = "my.getPhoneNumber"){
        return 1 = 1
    }
}

fn isEventAPI(cn: string) -> bool {
    if (cn = "my.alert"){
        return 1 = 1
    }
}

fn isRouteAPI(cn: string) -> bool {
    if (cn = "my.switchTab"
    || cn = "my.navigateTo"
    || cn = "my.navigateBack"
    || cn = "my.redirectTo"
    || cn = "my.reLaunch"
    || cn = "my.navigateToMiniProgram"
    || cn = "my.navigateBackMiniProgram"
    || cn = "my.openAlipayApp"
    || cn = "my.ap.navigateToAlipayPage"
    || cn = "my.ap.openURL"){
        return 1 = 1
    }
}

fn getRouteAPIType(cn: string) -> string {
    if (cn = "my.switchTab"
    || cn = "my.navigateTo"
    || cn = "my.navigateBack"
    || cn = "my.redirectTo"
    || cn = "my.reLaunch"){
        return "page"
    }
    if (cn = "my.navigateToMiniProgram"
    || cn = "my.navigateBackMiniProgram"){
        return "miniProgram"
    }
    if (cn = "my.openAlipayApp"
    || cn = "my.ap.navigateToAlipayPage"){
        return "alipay"
    }
    if (cn = "my.ap.openURL"){
        return "url"
    }
}

fn isRequestAPI(cn: string) -> bool {
    if (cn = "my.request"
    || cn = "my.uploadFile"
    || cn = "my.downloadFile"
    || cn = "my.connectSocket"
    || cn = "my.sendSocketMessage"){
        return 1 = 1
    }
}

// ——————————————————————————————————————————————————————
// 查询函数
// ——————————————————————————————————————————————————————

// 查询弹窗授权API
// 
// my.getAuthCode
fn queryAuthorizeAPI(path:string, callName: string, callLoc:int, callId: int, successCallback:string, failCallback: string, scope:string) -> bool {
    let (jsDB = load_js_db()) {
        for(ce in CallExpression::__all__(jsDB)){
            if(path = ce.getLocation().getFile().getRelativePath() &&
                callLoc = ce.getLocation().getStartLineNumber() && 
                callName = getCallName(ce) &&
                isAuthorizeAPI(callName) &&
                callId = ce.id &&
                successCallback = getSuccessCallback(ce) &&
                failCallback = getFailCallback(ce) &&
                scope = getAuthScope(ce)){
                    return 1 = 1        
            }
        }
    }
}


// 查询弹窗授权事件
// open-type
fn queryAuthorizeEvent(path:string, loc:int, elementId:int, openType: string) -> bool {
    let(xmlDB = load_xml_db()){
        for(xe in XmlElement::__all__(xmlDB)){
            for(attr in XmlAttribute::__all__(xmlDB)){
                if(xe.getElementName() = "button" && 
                attr = xe.getAttribute() &&
                attr.getName() = "open-type" &&
                openType = attr.getValue() &&        
                path = xe.getLocation().getFile().getRelativePath() &&
                loc = xe.getLocation().getStartLineNumber() &&
                elementId = xe.id){
                        return 1 = 1
                }
            }           
        }
    }
}

// 查询通用API事件
// my.alert
fn queryAlertAPI(path:string, callName: string, callLoc:int, callId: int, successCallback:string, successCallId: int, failCallback: string) -> bool {
     let (jsDB = load_js_db()) {
        for(ce in CallExpression::__all__(jsDB)){
            if(path = ce.getLocation().getFile().getRelativePath() &&
            callLoc = ce.getLocation().getStartLineNumber() && 
            callName = getCallName(ce) &&
            isEventAPI(callName) && 
            callId = ce.id && 
            successCallback = getSuccessCallback(ce) && 
            failCallback = getFailCallback(ce)){
                for (tmpSuccessCallId in getSuccessCallId(ce)) {
                    if (successCallId = tmpSuccessCallId) {
                        return 1 = 1
                    }
                }
            }
        }
    }
}


// 查询函数和方法
// call: 子调用
// method: 父亲调用或方法
fn queryFunctionAndMethod(path:string, callName: string, callLoc:int, callId: int, callType: string) -> bool {
    // that.ImgAnalyze();
    let (jsDB = load_js_db()) {
        for(ce in CallExpression::__all__(jsDB)){
            if(path = ce.getLocation().getFile().getRelativePath() &&
            callName = getCallName(ce) &&
            callLoc = ce.getLocation().getStartLineNumber() &&
            callId = ce.id &&
            callType = "use"){
                return 1 = 1
            }
        }
    }
    // getProvince() {...}
    let (jsDB = load_js_db()) {
        for(md in MethodDeclaration::__all__(jsDB)){
            if(path = md.getLocation().getFile().getRelativePath() &&
            callName = md.getName() &&
            callLoc = md.getLocation().getStartLineNumber() &&
            callId = md.id &&
            callType = "define"){
                return 1 = 1
            }
        }
    }
    // onLoad: function() {...}
    let (jsDB = load_js_db()) {
        for(fe in FunctionExpression::__all__(jsDB)){
            for(pa in PropertyAssignment::__all__(jsDB)){
                 if(path = pa.getLocation().getFile().getRelativePath() &&
                pa.id = fe.getParent().id &&
                callName = pa.getName() &&
                callLoc = pa.getLocation().getStartLineNumber() &&
                callId = pa.id &&
                callType = "define"){
                    return 1 = 1
                }
            }         
        }
    }
    // function GetSiteInfo() {}
    let (jsDB = load_js_db()) {
        for(fd in FunctionDeclaration::__all__(jsDB)){
            if(path = fd.getLocation().getFile().getRelativePath() &&
            callLoc = fd.getLocation().getStartLineNumber() && 
            callName = fd.getName() &&
            callId = fd.id &&
            callType = "define"){
                return 1 = 1
            }
        }      
    }
    // const onGetAuthorize = (pageIndexInit, isClose) => {...}
    let(jsDB = load_js_db()){
        for(vd in VariableDeclaration::__all__(jsDB)){
            for (fld in FunctionLikeDeclaration::__all__(jsDB)){
                for(idf in Identifier::__all__(jsDB)){
                    if(vd.id = fld.getParent().id &&
                    vd.id = idf.getParent().id &&
                    path = fld.getLocation().getFile().getRelativePath() &&
                    callLoc = fld.getLocation().getStartLineNumber() && 
                    callName = idf.getName() &&
                    callId = fld.id &&
                    callType = "define"){
                        return 1 = 1
                    }
                }
            }
        }
    }
}

// 查询函数包含关系
fn queryFunctionContainsCall(path:string, callName: string, callLoc:int, callId:int, methodName: string, methodLoc:int, methodId: int) -> bool {
    // onLoad(option) {...__CALL__...}
    let (jsDB = load_js_db()) {
        for(md in MethodDeclaration(jsDB)) {
            for(ce in CallExpression(jsDB)) {
                if(ce.id = md.getADescendant().id && path = ce.getLocation().getFile().getRelativePath() &&
                methodName = md.getName() &&
                methodLoc = md.getLocation().getStartLineNumber() &&
                methodId = md.id &&
                callName = getCallName(ce) &&
                callLoc = ce.getLocation().getStartLineNumber() && 
                callId = ce.id){
                    return 1 = 1
                }
            }
        }
    }
    // onLoad: function() {...___CALL__...}
    let (jsDB = load_js_db()) {
        for(fe in FunctionExpression(jsDB)) {
            for(ce in CallExpression(jsDB)) {
                if (ce.id = fe.getADescendant().id) {
                    for(pa in PropertyAssignment(jsDB)) {
                        if(pa.id = fe.getParent().id && path = pa.getLocation().getFile().getRelativePath() &&
                        methodName = pa.getName() &&
                        methodLoc = pa.getLocation().getStartLineNumber() &&
                        methodId = pa.id &&
                        callName = getCallName(ce) &&
                        callLoc = ce.getLocation().getStartLineNumber() &&
                        callId = ce.id) {
                            return 1 = 1
                        }
                    }
                }
            }
        }
    }
    // function GetSiteInfo() {...__CALL__...}
    let (jsDB = load_js_db()) {
        for(fd in FunctionDeclaration(jsDB)){
            for(ce in CallExpression(jsDB)){
                if(ce.id = fd.getADescendant().id && path = ce.getLocation().getFile().getRelativePath() &&
                methodName = fd.getName() &&
                methodLoc = fd.getLocation().getStartLineNumber() &&
                methodId = fd.id &&
                callName = getCallName(ce) &&
                callLoc = ce.getLocation().getStartLineNumber() && 
                callId = ce.id){
                    return 1 = 1
                }
            }
        }
    }
    // const onGetAuthorize = (pageIndexInit, isClose) => {...__CALL__...}
    let(jsDB = load_js_db()){
        for (fld in FunctionLikeDeclaration(jsDB)) {
            for(ce in CallExpression(jsDB)) {
                if (ce.id = fld.getADescendant().id) {
                    for(vd in VariableDeclaration(jsDB)) {
                        if (vd.id = fld.getParent().id) {
                            for(idf in Identifier(jsDB)) {
                                if (vd.id = idf.getParent().id &&
                                    path = fld.getLocation().getFile().getRelativePath() &&
                                    methodName = idf.getName() &&
                                    methodLoc = idf.getLocation().getStartLineNumber() &&
                                    methodId = fld.id &&
                                    callName = getCallName(ce) &&
                                    callLoc = ce.getLocation().getStartLineNumber() && 
                                    callId = ce.id) {
                                    return 1 = 1
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // 堆栈溢出：my.alert({success:()=>{...__CALL__...}})
    // let(jsDB = load_js_db()){
    //     for(ce1 in CallExpression::__all__(jsDB)){
    //         let(ce2 = ce1.getADescendant()){
    //             if(isCallExpression(ce2) &&
    //             path = ce1.getLocation().getFile().getRelativePath() &&
    //             methodName = getCallName(ce1) &&
    //             methodLoc = ce1.getLocation().getStartLineNumber() &&
    //             methodId = ce1.id &&
    //             callName = getCallName(ce2) &&
    //             callLoc = ce2.getLocation().getStartLineNumber() && 
    //             callId = ce2.id
    //             ){
    //                 return 1 = 1
    //             }
    //         }
    //     }
    // }

    // __CALL__(__CALL__)
    let(jsDB = load_js_db()){
        for(mce in CallExpression::__all__(jsDB)){
            for(ce in CallExpression::__all__(jsDB)){
                if(path = mce.getLocation().getFile().getRelativePath() &&
                methodLoc = mce.getLocation().getStartLineNumber() &&
                methodName = getCallName(mce) &&
                methodId = mce.id &&
                ce.id = mce.getADescendant().id &&
                callLoc = ce.getLocation().getStartLineNumber() &&
                callName = getCallName(ce) &&
                callId = ce.id
                ){
                    return 1 = 1
                }
            }
        }
    }
}

fn queryCallbackContainsCall(path:string, callName: string, callLoc:int, callId:int, methodName: string, methodLoc:int, methodId: int) -> bool {
    // my.getAuthCode({success: (res) => {my.getPhoneNumber(...)})
    let(jsDB = load_js_db()){
        for(ce in CallExpression::__all__(jsDB)){
            if(path = ce.getLocation().getFile().getRelativePath()
            && methodLoc = ce.getLocation().getStartLineNumber()
            && methodId = ce.id
            && methodName = getCallName(ce) 
            && isAuthorizeAPI(methodName)){
                for(ole in ObjectLiteralExpression::__all__(jsDB)){
                    for(pa in PropertyAssignment::__all__(jsDB)){
                        for(fld in FunctionLikeDeclaration::__all__(jsDB)){
                            if(ole.id = ce.getAChild().id
                            && pa.id = ole.getAChild().id
                            && (pa.getName() = "success" || pa.getName() = "fail")
                            && fld.id = pa.getAChild().id){
                                    for(innerCe in CallExpression::__all__(jsDB)){
                                        if( callName = getCallName(innerCe)
                                        && isAuthorizeAPI(callName)
                                        && innerCe.id = fld.getADescendant().id
                                        && callLoc = innerCe.getLocation().getStartLineNumber()
                                        && callId = innerCe.id){
                                            return 1 = 1
                                        }
                                    }
                                }                     
                            }
                        }
                    }
                }
            }
        }
}

// 查询this关键词
fn queryThisKeywordRelatedCall(path:string, thisToLoc: int, thisToVariable: string, thisToCallName: string, thisToCallId:int, methodName:string, methodLoc: int, methodId:int) -> bool {
    // var that = this;
    // that.getUserLocation();
    let (jsDB = load_js_db()) {
        for(fe in FunctionLikeDeclaration(jsDB)) {
            for(ce in CallExpression(jsDB)) {
                if (ce.id = fe.getADescendant().id) {
                    for(tk in ThisKeyword(jsDB)) {
                        if (tk.id = fe.getADescendant().id) {
                            for(vd in VariableDeclaration(jsDB)) {
                                if (vd.id = tk.getParent().id) {
                                    for(idt in Identifier(jsDB)) {
                                        if (vd.id = idt.getParent().id && path = ce.getLocation().getFile().getRelativePath() &&                      
                                            thisToVariable = idt.getName() &&
                                            isSpecificCall(ce, thisToVariable) &&
                                            thisToCallName = getCallName(ce) &&
                                            thisToCallId = ce.id &&
                                            thisToLoc = ce.getLocation().getStartLineNumber() &&
                                            getParentMethodName(ce, methodName, methodLoc, methodId)
                                            ) {
                                            return 1 = 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

// 查询模块引入关系
fn queryImport(path: string, importPath: string, importMethod: string) -> bool{
    // import Promise from '/utils/es6-promise.min.js';
    let (jsDB = load_js_db()) {
        for(id in ImportDeclaration::__all__(jsDB)) {
            for (ic in ImportClause::__all__(jsDB)) {
                for(sl in StringLiteral::__all__(jsDB)) {
                    for(idf in Identifier::__all__(jsDB)) {
                        if(id.id = sl.getParent().id && id.id = ic.getParent().id && ic.id = idf.getParent().id
                        && path = id.getLocation().getFile().getRelativePath()
                        && importPath = sl.getText()
                        && importMethod = idf.getName()) {
                            return 1 = 1
                        }
                    }
                }
            }
        }
    }
    let (jsDB = load_js_db()) {
        for(id in ImportDeclaration::__all__(jsDB)) {
            for (is in ImportSpecifier::__all__(jsDB)) {
                for(sl in StringLiteral::__all__(jsDB)) {
                    for(idf in Identifier::__all__(jsDB)) {
                        if(id.id = sl.getParent().id && is.id = id.getADescendant().id  && is.id = idf.getParent().id
                        && path = id.getLocation().getFile().getRelativePath()
                        && importPath = sl.getText()
                        && importMethod = idf.getName()) {
                            return 1 = 1
                        }
                    }      
                }
            }
        }
    }
}

// 查询模块导出关系
fn queryExport(path: string, function: string, export: string) -> bool{
    // export default k;
    let (jsDB = load_js_db()) {
        for(es in ExportAssignment::__all__(jsDB)) {
            for(id in Identifier::__all__(jsDB)) {
                if(es.id = id.getParent().id 
                && path = es.getLocation().getFile().getRelativePath()
                && function = id.getText()
                && export = "default") {
                    return 1 = 1
                }
            }
        }
    }
    // export default {k};
    let (jsDB = load_js_db()) {
        for(es in ExportAssignment::__all__(jsDB)) {
            for(obj in ObjectLiteralExpression::__all__(jsDB)){
                for(spa in ShorthandPropertyAssignment::__all__(jsDB)){
                    for(id in Identifier::__all__(jsDB)) {
                        if(es.id = obj.getParent().id
                        && obj = spa.getParent() 
                        && spa.id = id.getParent().id
                        && path = es.getLocation().getFile().getRelativePath()
                        && function = id.getText()
                        && export = "default") {
                            return 1 = 1
                        }
                    }
                }
            }
            
        }
    } 

    // export {Base};
    let (jsDB = load_js_db()) {
        for(es in ExportSpecifier::__all__(jsDB)) {
            for(id in Identifier::__all__(jsDB)) {
                if(es.id = id.getParent().id
                && path = es.getLocation().getFile().getRelativePath()
                && function = id.getText()
                && export = "specifier") {
                    return 1 = 1
                }
            }
        }
    }
    // export function GetSiteInfo(){...}
     let (jsDB = load_js_db()) {
        for(fd in FunctionDeclaration::__all__(jsDB)){
            for(exw in ExportKeyword::__all__(jsDB)) {
                if(fd.id = exw.getParent() .id
                && path = fd.getLocation().getFile().getRelativePath()
                && function = fd.getName()
                && export = "exportFunction"){
                    return 1 = 1
                }
            }
        }
     }


    // module.exports = {GetDateNow: GetDateNow, ...}
    let (jsDB = load_js_db()) {
        for(be in BinaryExpression::__all__(jsDB)){
            for(pae in PropertyAccessExpression::__all__(jsDB)) {
                for(pa in PropertyAssignment::__all__(jsDB)) {
                    if(path = pae.getLocation().getFile().getRelativePath() &&
                        pae.getText() = "module.exports" &&
                        be.id = pae.getParent().id &&
                        pa.id = be.getADescendant().id &&
                        function = pa.getText() &&
                        export = "moduleExportProperty") {
                            return 1 = 1
                        }
                    }
            }
        }

    }
    // module.exports = {requestPost, ...}
    let (jsDB = load_js_db()) {
        for(be in BinaryExpression::__all__(jsDB)){
            for(pae in PropertyAccessExpression::__all__(jsDB)) {
                for(spa in ShorthandPropertyAssignment::__all__(jsDB)) {
                    if(path = pae.getLocation().getFile().getRelativePath() &&
                        pae.getText() = "module.exports" &&
                        be.id = pae.getParent().id &&
                        spa.id = be.getADescendant().id &&
                        function = spa.getName() &&
                        export = "moduleExportShortProperty") {
                            return 1 = 1
                        }
                    }
            }
        }

    } 
}

// 查询getApp调用关系
fn queryGetAppCallFunction(path:string, callLoc:int, callName:string, callId:int) -> bool {
    // app.qrcode
    let(jsDB = load_js_db()){
        for(ce in CallExpression::__all__(jsDB)){
            for(pae in PropertyAccessExpression::__all__(jsDB)){
                if(ce.id = pae.getParent().id &&
                callName = pae.getText() &&
                callName.contains("app.") &&
                path = ce.getLocation().getFile().getRelativePath() &&
                callLoc = ce.getLocation().getStartLineNumber() &&
                callId = ce.id){
                    return 1 = 1
                }
            }
        }
    }
}

// 查询事件XML函数
fn queryXMLEvent(path:string, loc:int, elementId:int, eventAttrName:string, eventAttrValue:string) -> bool {
    let(xmlDB = load_xml_db()) {
        for(xe in XmlElement::__all__(xmlDB)){
            let(eventAttr = xe.getAttribute()){
                if(eventAttrName = eventAttr.getName() &&
                eventAttrName.contains("on") &&
                eventAttrValue = eventAttr.getValue() &&
                path = xe.getLocation().getFile().getRelativePath() &&
                loc = xe.getLocation().getStartLineNumber() &&
                elementId = xe.id
                ){
                    return 1 = 1
                }
            }     
        }
    }
}

// 查询XML中的import
fn queryXMLImport(path:string, referenceFile: string) -> bool {
    let (xmlDB = load_xml_db()) {
        for(xe in XmlElement::__all__(xmlDB)){
            for(attr in XmlAttribute::__all__(xmlDB)){
                if(path = xe.getLocation().getFile().getRelativePath() && 
                xe.getName() = "import" &&
                attr = xe.getAttribute() &&
                attr.getName() = "src" &&
                referenceFile = attr.getValue()
                ){
                    return 1 = 1
                }
            }
        }
    }
}

// 查询XML中的template
fn queryXMLTemplate(path: string, templateName:string, templateType: string) -> bool {
    let (xmlDB = load_xml_db()) {
        for(xe in XmlElement::__all__(xmlDB)){
            for(attr in XmlAttribute::__all__(xmlDB)){
                if(path = xe.getLocation().getFile().getRelativePath() && 
                xe.getName() = "template" &&
                attr = xe.getAttribute() &&
                attr.getName() = "name" &&
                templateType = "define" &&
                templateName = attr.getValue()){
                    return 1 = 1
                }
            }
        }
    }

    let (xmlDB = load_xml_db()) {
        for(xe in XmlElement::__all__(xmlDB)){
            for(attr in XmlAttribute::__all__(xmlDB)){
                if(path = xe.getLocation().getFile().getRelativePath() && 
                xe.getName() = "template" &&
                attr = xe.getAttribute() &&
                attr.getName() = "is" &&
                templateType = "use" &&
                templateName = attr.getValue()){
                    return 1 = 1
                }
            }
        }
    }
}

// 查询路由函数
fn queryRouteAPI(path:string, loc:int, callName: string, callId:int, routeType: string, routeTarget: string, pageMethodName: string, failCallback: string) -> bool {
    let (jsDB = load_js_db()) {
        for(ce in CallExpression::__all__(jsDB)){
            if(path = ce.getLocation().getFile().getRelativePath() &&
                loc = ce.getLocation().getStartLineNumber() &&
                callName = getCallName(ce) &&
                callId = ce.id &&
                isRouteAPI(callName) && 
                routeType = getRouteAPIType(callName)
                && pageMethodName = getPageMethodName(ce)
                && failCallback = getFailCallback(ce)){
                for (ceRouteTarget in getRouteTarget(ce)) {
                    if (ceRouteTarget = routeTarget) {
                        return 1 = 1
                    }
                }
            }               
        }
    }
}

// 获取路由API的目标
fn getRouteTarget(ce: CallExpression) -> *string {
    let(jsDB = load_js_db()) {
        for(oe in ObjectLiteralExpression::__all__(jsDB)) {
            for(pa in PropertyAssignment::__all__(jsDB)) {
                for(ida in Identifier::__all__(jsDB)) {
                    if (ce.id = oe.getParent().id && oe.id = pa.getParent().id && ida.getName() = "url" && ida.getParent().id = pa.id){
                        yield pa.getText()
                    }   
                }     
            }          
        }
    }
}

// 查询分支条件
// 更新至新版本Sparrow代码中
fn queryBranchAndCondition(path:string, loc:int, callName: string, callId:int, branchLoc: int, branchCondition: string, branchVariable: string) -> bool {
    let(jsDB = load_js_db()) {
        for(ifs in IfStatement::__all__(jsDB)){
            for(ce in CallExpression::__all__(jsDB)){
                if(path = ce.getLocation().getFile().getRelativePath() &&
                loc = ce.getLocation().getStartLineNumber() &&
                callName = getCallName(ce) &&
                callId = ce.id &&
                ce.id = ifs.getADescendant().id &&
                branchLoc = ifs.getLocation().getStartLineNumber() &&
                branchCondition = ifs.getCondition().getText() &&
                branchVariable = getBranchConditionVariable(ifs)
                ){
                    return 1 = 1
                }
            }
        }
    }
}

// 查询请求类API
fn queryRequestAPI(path:string, callName: string, callLoc:int, callId: int, url: string, data: string, failCallback: string) -> bool {
    let (jsDB = load_js_db()) {
        for(ce in CallExpression::__all__(jsDB)){
            if(path = ce.getLocation().getFile().getRelativePath() &&
                callLoc = ce.getLocation().getStartLineNumber() && 
                callName = getCallName(ce)
            ){                
                for(ole in ObjectLiteralExpression::__all__(jsDB)){
                    if(isRequestAPI(callName) 
                    && callId = ce.id 
                    && ole.getParent().id = ce.id
                    && url = getPropertyAssignValueByName(ole, "url")
                    && data = getPropertyAssignValueByName(ole, "data")
                    && failCallback = getFailCallback(ce)){
                        return 1 = 1
                    }
                }  
            }
        }
    }
}


fn main(){
    output(queryAuthorizeAPI())
    output(queryAuthorizeEvent())
    output(queryAlertAPI())
    output(queryRouteAPI())

    output(queryXMLEvent())
    output(queryXMLImport())
    output(queryXMLTemplate())
    
    output(queryRequestAPI())

    output(queryFunctionAndMethod())
    output(queryBranchAndCondition())
    output(queryGetAppCallFunction())
    output(queryFunctionContainsCall())
    output(queryCallbackContainsCall())
    output(queryThisKeywordRelatedCall())
    output(queryExport())
    output(queryImport())
}
